//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2020/8/12 16:41:30
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using MySql.Data.EntityFrameworkCore.Extensions;

namespace EasyNow.Dal
{

    public partial class EasyNowContext : DbContext
    {

        public EasyNowContext() :
            base()
        {
            OnCreated();
        }

        public EasyNowContext(DbContextOptions<EasyNowContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseMySQL(@"persistsecurityinfo=True;server=106.55.16.128;port=30000;user id=root;password=sbxaialhj;database=EasyNow");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<Role> Roles
        {
            get;
            set;
        }

        public virtual DbSet<Privilege> Privileges
        {
            get;
            set;
        }

        public virtual DbSet<UserRole> UserRoles
        {
            get;
            set;
        }

        public virtual DbSet<RolePrivilege> RolePrivileges
        {
            get;
            set;
        }

        public virtual DbSet<Menu> Menus
        {
            get;
            set;
        }

        public virtual DbSet<RoleMenu> RoleMenus
        {
            get;
            set;
        }

        public virtual DbSet<Device> Device
        {
            get;
            set;
        }

        public virtual DbSet<UserDevice> UserDevice
        {
            get;
            set;
        }

        public virtual DbSet<Service> Service
        {
            get;
            set;
        }

        public virtual DbSet<ServiceCategory> ServiceCategory
        {
            get;
            set;
        }

        public virtual DbSet<UserService> UserService
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration<User>(new UserConfiguration());
            modelBuilder.ApplyConfiguration<Role>(new RoleConfiguration());
            modelBuilder.ApplyConfiguration<Privilege>(new PrivilegeConfiguration());
            modelBuilder.ApplyConfiguration<UserRole>(new UserRoleConfiguration());
            modelBuilder.ApplyConfiguration<RolePrivilege>(new RolePrivilegeConfiguration());
            modelBuilder.ApplyConfiguration<Menu>(new MenuConfiguration());
            modelBuilder.ApplyConfiguration<RoleMenu>(new RoleMenuConfiguration());
            modelBuilder.ApplyConfiguration<Device>(new DeviceConfiguration());
            modelBuilder.ApplyConfiguration<UserDevice>(new UserDeviceConfiguration());
            modelBuilder.ApplyConfiguration<Service>(new ServiceConfiguration());
            modelBuilder.ApplyConfiguration<ServiceCategory>(new ServiceCategoryConfiguration());
            modelBuilder.ApplyConfiguration<UserService>(new UserServiceConfiguration());
            CustomizeMapping(ref modelBuilder);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
